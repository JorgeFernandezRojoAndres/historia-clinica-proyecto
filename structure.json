{
  "public": {
    "js": {
      "gestionCitas.js": "document.addEventListener('DOMContentLoaded', function () {\r\n  const especialidadSelector = document.getElementById('especialidadSelector');\r\n  const medicoSelector = document.getElementById('idMedico');\r\n  const verAgendaButton = document.getElementById('verAgendaButton');\r\n  const buscarPacienteInput = document.getElementById('buscarPaciente');\r\n  const listaResultados = document.getElementById('listaResultados');\r\n  const especialidadMedicoInput = document.getElementById('especialidadMedico');\r\n  const idPacienteInput = document.getElementById('idPaciente');\r\n\r\n  // Verificar si el script de datos está disponible\r\n  let medicos = [];\r\n  try {\r\n    medicos = JSON.parse(document.getElementById('medicosData').textContent);\r\n  } catch (error) {\r\n    console.error('Error al cargar los datos de médicos:', error);\r\n    return; // Detener el script si no hay datos válidos\r\n  }\r\n\r\n  // Configurar el botón dinámico \"Ver Agenda del Médico\"\r\n  if (medicoSelector && verAgendaButton) {\r\n    configurarBotonAgenda('idMedico', 'verAgendaButton', 'especialidadMedico');\r\n  }\r\n\r\n  // Evento para filtrar médicos por especialidad\r\n  if (especialidadSelector && medicoSelector) {\r\n    especialidadSelector.addEventListener('change', function () {\r\n      const especialidadSeleccionada = this.value;\r\n      medicoSelector.innerHTML = '<option value=\"\">-- Selecciona un médico --</option>';\r\n\r\n      try {\r\n        medicos.forEach(medico => {\r\n          if (medico.especialidad === especialidadSeleccionada) {\r\n            const option = document.createElement('option');\r\n            option.value = medico.idMedico;\r\n            option.textContent = medico.nombre;\r\n            option.setAttribute('data-especialidad', medico.especialidad);\r\n            medicoSelector.appendChild(option);\r\n          }\r\n        });\r\n\r\n        // Limpiar campo de especialidad al cambiar especialidad\r\n        if (especialidadMedicoInput) especialidadMedicoInput.value = '';\r\n      } catch (error) {\r\n        console.error('Error al filtrar médicos por especialidad:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Autocompletado para Buscar Paciente\r\n  if (buscarPacienteInput && listaResultados) {\r\n    buscarPacienteInput.addEventListener('input', async function () {\r\n      const query = buscarPacienteInput.value.trim();\r\n\r\n      if (query.length > 0) {\r\n        try {\r\n          const response = await fetch(`/citas/buscar-paciente?term=${query}`);\r\n          if (response.ok) {\r\n            const pacientes = await response.json();\r\n            mostrarResultados(pacientes);\r\n          } else {\r\n            console.error('Error al buscar pacientes: Respuesta no válida');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error al buscar pacientes:', error);\r\n        }\r\n      } else {\r\n        listaResultados.style.display = 'none'; // Ocultar si no hay query\r\n      }\r\n    });\r\n  }\r\n\r\n  function mostrarResultados(pacientes) {\r\n    listaResultados.innerHTML = ''; // Limpiar resultados anteriores\r\n\r\n    if (pacientes.length > 0) {\r\n      listaResultados.style.display = 'block'; // Mostrar el contenedor de resultados\r\n      pacientes.forEach(paciente => {\r\n        const li = document.createElement('li');\r\n        li.textContent = `${paciente.nombre} (ID: ${paciente.idPaciente})`;\r\n        li.style.cursor = 'pointer';\r\n        li.addEventListener('click', () => seleccionarPaciente(paciente));\r\n        listaResultados.appendChild(li);\r\n      });\r\n    } else {\r\n      listaResultados.style.display = 'none'; // Ocultar si no hay resultados\r\n    }\r\n  }\r\n\r\n  function seleccionarPaciente(paciente) {\r\n    if (buscarPacienteInput) buscarPacienteInput.value = paciente.nombre;\r\n    if (idPacienteInput) idPacienteInput.value = paciente.idPaciente; // Asignar ID al campo oculto\r\n    listaResultados.style.display = 'none'; // Ocultar resultados\r\n  }\r\n\r\n  // Ocultar la lista de resultados si se hace clic fuera\r\n  document.addEventListener('click', function (e) {\r\n    if (\r\n      buscarPacienteInput &&\r\n      listaResultados &&\r\n      !buscarPacienteInput.contains(e.target) &&\r\n      !listaResultados.contains(e.target)\r\n    ) {\r\n      listaResultados.style.display = 'none';\r\n    }\r\n  });\r\n\r\n  // Listener para recibir el mensaje de la ventana emergente\r\n  window.addEventListener('message', function (event) {\r\n    if (event.origin === window.location.origin && event.data.tipo === 'seleccionarHorario') {\r\n      const { fechaHora } = event.data;\r\n      if (fechaHora) {\r\n        const fechaHoraInput = document.getElementById('fechaHora');\r\n        if (fechaHoraInput) {\r\n          fechaHoraInput.value = fechaHora;\r\n          console.log(`Campo fechaHora actualizado: ${fechaHora}`);\r\n        } else {\r\n          console.error('El campo fechaHora no existe en el formulario.');\r\n        }\r\n      } else {\r\n        console.warn('El mensaje recibido no contiene fechaHora.');\r\n      }\r\n    }\r\n  });\r\n});  ",
      "nuevaCita.js": "console.log(\"Esperando mensajes desde la ventana emergente...\");\r\n\r\nwindow.addEventListener(\"message\", function (event) {\r\n  console.log(\"Mensaje recibido:\", event);\r\n\r\n  // Verifica el origen del mensaje para mayor seguridad\r\n  if (event.origin !== window.location.origin) {\r\n    console.error(\"Origen del mensaje no permitido:\", event.origin);\r\n    return;\r\n  }\r\n\r\n  // Verifica el tipo de mensaje\r\n  const { tipo, fechaHora } = event.data;\r\n  if (tipo === 'seleccionarHorario' && fechaHora) {\r\n    console.log(`Actualizando campo fechaHora con: ${fechaHora}`);\r\n    const fechaHoraInput = document.getElementById('fechaHora');\r\n    if (fechaHoraInput) {\r\n      fechaHoraInput.value = fechaHora;\r\n      console.log(\"Campo fechaHora actualizado correctamente.\");\r\n    } else {\r\n      console.error(\"No se encontró el campo 'fechaHora' en el formulario.\");\r\n    }\r\n  } else {\r\n    console.warn(\"El mensaje recibido no contiene el tipo o la fechaHora esperados.\");\r\n  }\r\n});\r\n"
    }
  }
}