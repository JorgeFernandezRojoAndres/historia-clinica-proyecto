{
  "index.js": "const express = require('express');\r\nconst session = require('express-session');\r\nconst bcrypt = require('bcryptjs');\r\nconst config = require('./config/config');\r\nconst mysql = require('mysql2');\r\nconst logger = require('morgan');\r\nconst cookieParser = require('cookie-parser');\r\nconst compression = require('compression');\r\nconst methodOverride = require('method-override');\r\nconst http = require('http');\r\nconst socketIo = require('socket.io');\r\nconst router = express.Router();\r\nconst historiasController = require('./app/controllers/historiasController');\r\nconst medicosController = require('./app/controllers/medicosController');\r\nconst citasController = require('./app/controllers/citasController');\r\nconst authController = require('./app/controllers/authController');\r\nconst { isAuthenticated, isPacienteOrMedico } = require('./middleware/roleMiddleware');\r\nconst notificaciones = require('./utils/notificaciones');\r\n\r\n// Inicializar Express\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = socketIo(server);\r\nnotificaciones.init(io);\r\nconst port = 3000;\r\n\r\n// Configuración del motor de vistas\r\napp.set('view engine', 'pug');\r\napp.set('views', './app/views');\r\n\r\n// Middlewares para archivos estáticos y manejo de datos\r\napp.use(express.static('public'));\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(cookieParser());\r\napp.use(compression());\r\napp.use(methodOverride('_method'));\r\n\r\n// Configuración de sesiones\r\napp.use(session({\r\n    secret: 'tu_secreto', // Cambia esto a una clave más segura en producción\r\n    resave: false,\r\n    saveUninitialized: false,\r\n    cookie: { secure: false, maxAge: 3600000 } // Añadir opciones adicionales\r\n}));\r\n\r\n// Middleware para gestionar sesiones de usuarios\r\napp.use((req, res, next) => {\r\n    console.log('Sesión completa:', req.session);\r\n    console.log('Usuario en sesión:', req.session.user);\r\n    console.log('Clínica seleccionada en sesión:', req.session.idClinica);\r\n    res.locals.user = req.session.user; // Disponible en todas las vistas Pug\r\n    res.locals.clinicaSeleccionada = req.session.idClinica || false;\r\n    \r\n    next();\r\n});\r\n\r\n// Definir rutas principales\r\napp.get('/', (req, res) => {\r\n    if (!req.session.user) {\r\n        // Si no hay usuario en la sesión, renderiza el formulario para seleccionar la clínica\r\n        return res.render('layout', { title: 'TurnoExpress', clinicaSeleccionada: false });\r\n    }\r\n    \r\n    // Si hay un usuario autenticado, renderiza la página principal con la clínica seleccionada\r\n    res.render('layout', { title: 'TurnoExpress', clinicaSeleccionada: true });\r\n});\r\n\r\napp.get('/saludplus', (req, res) => {\r\n    req.session.clinicaSeleccionada = true;\r\n    res.render('layout', { title: 'Clínica Integral SaludPlus', clinicaSeleccionada: true });\r\n});\r\n\r\napp.get('/vidatotal', (req, res) => {\r\n    req.session.clinicaSeleccionada = true;\r\n    res.render('layout', { title: 'Centro Médico Vida Total', clinicaSeleccionada: true });\r\n});\r\n\r\n// Registrar las rutas de especialidades\r\nconst especialidadesRouter = require('./routes/especialidades');\r\napp.use('/especialidades', especialidadesRouter);\r\n\r\n// Registrar las rutas de secretaria\r\nconst secretariaRoutes = require('./routes/secretaria');\r\napp.use('/secretaria', secretariaRoutes);\r\n// Registrar las rutas de autenticación\r\nconst authRoutes = require('./routes/auth');\r\napp.use('/', authRoutes);\r\n\r\n// Registrar las rutas del administrador (nuevo archivo de rutas)\r\nconst adminRoutes = require('./routes/admin');\r\napp.use('/admin', adminRoutes);\r\n\r\n// Ruta para mostrar el formulario de selección de clínica\r\napp.get('/select-clinica', (req, res) => {\r\n    res.render('selectClinica'); // Asegúrate de que este es el nombre correcto de tu plantilla Pug\r\n});\r\n// Ruta para manejar la selección de clínica\r\napp.post('/seleccionar-clinica', authController.seleccionarClinica);\r\n// Registrar las rutas de pacientes\r\nconst pacientesRouter = require('./routes/pacientes');\r\napp.use('/pacientes', pacientesRouter);\r\napp.use('/paciente', pacientesRouter);\r\napp.use('/registro-pendiente', pacientesRouter);\r\n\r\n// Registrar las rutas de médicos\r\nconst medicosRoutes = require('./routes/medicos');\r\napp.use('/medicos', medicosRoutes);\r\n// Ruta para ver el historial de consultas de un paciente (puede ser accesible por médicos o pacientes)\r\napp.get('/medicos/historial/:idPaciente', isAuthenticated, (req, res) => {\r\n    console.log(`Accediendo al historial del paciente con ID: ${req.params.idPaciente}`);\r\n    medicosController.verHistorialPaciente(req, res); // Llama al controlador para manejar la lógica\r\n});\r\n// Registrar las rutas de citas\r\nconst citasRoutes = require('./routes/citas');\r\napp.use('/citas', citasRoutes);\r\n\r\n// Registrar las rutas de historial clínico\r\nconst historiasRoutes = require('./routes/historias');\r\napp.use('/historias', isAuthenticated, isPacienteOrMedico, historiasRoutes);\r\n//ruta para la descarga del historial clinico desde paciente \r\nrouter.get('/download/:id', historiasController.downloadPDF);\r\n\r\n\r\n// Ruta para ver mis turnos\r\napp.get('/turnos/mis-turnos', isAuthenticated, citasController.listarMisTurnos);\r\n\r\n// Endpoint para agregar un nuevo registro médico\r\napp.post('/addMedicalRecord', async (req, res) => {\r\n    try {\r\n        const newRecord = {\r\n            pacientesName: req.body.pacientesName,\r\n            condition: req.body.condition,\r\n            treatment: req.body.treatment,\r\n            dateOfVisit: req.body.dateOfVisit || new Date(),\r\n            notes: req.body.notes\r\n        };\r\n\r\n        const resultId = await MedicalRecord.create(newRecord);\r\n        res.status(201).send({ message: \"Registro médico creado con éxito\", id: resultId });\r\n    } catch (error) {\r\n        console.error('Error al procesar la solicitud:', error.message);\r\n        res.status(500).send(\"Error al insertar el registro médico\");\r\n    }\r\n});\r\n\r\n// Marcar citas pasadas como completadas al iniciar la aplicación\r\ncitasController.marcarCitasCompletadas();\r\n\r\n// Iniciar el servidor\r\nserver.listen(port, () => {\r\n    console.log(`Servidor corriendo en http://localhost:${port}`);\r\n    console.log('Rutas y middlewares configurados correctamente.');\r\n});\r\n"
}