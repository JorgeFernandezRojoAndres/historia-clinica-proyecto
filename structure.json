{
  "app": {
    "controllers": {
      "citasController.js": "const db = require('../../config/database');\nconst { enviarNotificacionAScretaria } = require('../../utils/notificaciones');\nconst { isAuthenticated, isSecretaria, getClinicasPermitidas } = require('../../middleware/roleMiddleware');\n\n// importa el helper\n\nexports.listAll = (req, res) => {\n    const { page = 1, limit = 10, estado, fechaInicio, fechaFin, clasificacion } = req.query;\n    const offset = (page - 1) * limit;\n    const params = [];\n\n    const idClinicas = getClinicasPermitidas(req);\n\n    let sql = `\n        SELECT \n            citas.idCita, \n            medicos.nombre AS nombreMedico, \n            pacientes.nombre AS nombrePaciente, \n            citas.fechaHora, \n            citas.motivoConsulta, \n            citas.estado,\n            citas.clasificacion\n        FROM citas\n        JOIN medicos ON citas.idMedico = medicos.idMedico\n        JOIN pacientes ON citas.idPaciente = pacientes.idPaciente\n        JOIN medicos_clinicas mc ON medicos.idMedico = mc.idMedico\n        WHERE 1 = 1\n    `;\n\n    // ğŸ“Œ Aplicar filtro por clÃ­nicas\n    if (idClinicas.length > 0) {\n        sql += ` AND mc.idClinica IN (${idClinicas.map(() => '?').join(',')})`;\n        params.push(...idClinicas);\n    }\n\n    if (estado) {\n        sql += ` AND citas.estado = ?`;\n        params.push(estado);\n    }\n\n    if (clasificacion) {\n        sql += ` AND citas.clasificacion = ?`;\n        params.push(clasificacion);\n    }\n\n    if (fechaInicio && fechaFin) {\n        sql += ` AND citas.fechaHora BETWEEN ? AND ?`;\n        params.push(fechaInicio, fechaFin);\n    }\n\n    sql += ` LIMIT ? OFFSET ?`;\n    params.push(parseInt(limit), parseInt(offset));\n\n    db.query(sql, params, (error, results) => {\n        if (error) {\n            console.error('Error al obtener las citas:', error);\n            return res.status(500).send(\"Error al obtener las citas\");\n        }\n\n        db.query('SELECT COUNT(*) AS total FROM citas', (countError, countResults) => {\n            if (countError) {\n                console.error('Error al contar las citas:', countError);\n                return res.status(500).send(\"Error al contar las citas\");\n            }\n\n            const total = countResults[0].total;\n            const totalPages = Math.ceil(total / limit);\n\n            res.render('citas', {\n                citas: results,\n                total,\n                totalPages,\n                currentPage: parseInt(page)\n            });\n        });\n    });\n};\n\n// Filtrar citas por estado y clasificaciÃ³n (solo accesible por la secretaria)\nexports.filterByState = (req, res) => {\n    console.log(\"ğŸ‘‰ EntrÃ³ a filterByState con query:\", req.query);\n    const { estado, clasificacion, clinica } = req.query;\n\n    // ğŸ”¹ Obtener clÃ­nicas y normalizar siempre a array\n    let rawClinicas = getClinicasPermitidas(req);\n    const idClinicas = Array.isArray(rawClinicas) ? rawClinicas : [rawClinicas];\n\n    console.log(\"Clinicas permitidas en sesiÃ³n (normalizadas):\", idClinicas);\n\n    let sql = `\n        SELECT citas.idCita, \n               pacientes.nombre AS nombrePaciente, \n               medicos.nombre AS nombreMedico,\n               citas.fechaHora, \n               citas.motivoConsulta, \n               citas.estado,\n               citas.clasificacion\n        FROM citas\n        JOIN pacientes ON citas.idPaciente = pacientes.idPaciente\n        JOIN medicos ON citas.idMedico = medicos.idMedico\n        JOIN medicos_clinicas mc ON medicos.idMedico = mc.idMedico\n        WHERE 1 = 1\n    `;\n\n    const params = [];\n\n    // ğŸ“Œ Filtro por clÃ­nica\n    if (req.session.user && req.session.user.role === 'secretaria') {\n        if (clinica) {\n            sql += ` AND mc.idClinica = ?`;\n            params.push(clinica);\n            console.log(\"Secretaria â†’ filtrando por clÃ­nica especÃ­fica:\", clinica);\n        } else {\n            console.log(\"Secretaria â†’ sin filtro de clÃ­nica (ve todas)\");\n        }\n    } else if (idClinicas.length > 0) {\n        sql += ` AND mc.idClinica IN (${idClinicas.map(() => '?').join(',')})`;\n        params.push(...idClinicas);\n    }\n\n    // ğŸ“Œ Filtro por estado\n    if (estado) {\n        sql += ` AND citas.estado = ?`;\n        params.push(estado);\n    }\n\n    // ğŸ“Œ Filtro por clasificaciÃ³n\n    if (clasificacion) {\n        sql += ` AND citas.clasificacion = ?`;\n        params.push(clasificacion);\n    }\n\n    db.query(sql, params, (error, results) => {\n        if (error) {\n            console.error('Error al filtrar citas:', error);\n            return res.status(500).send('Error al filtrar citas');\n        }\n\n        // ğŸ”¹ Formatear la fecha en espaÃ±ol\n        const citasFormateadas = results.map(cita => ({\n            ...cita,\n            fechaHora: new Date(cita.fechaHora).toLocaleString(\"es-AR\", {\n                year: \"numeric\",\n                month: \"2-digit\",\n                day: \"2-digit\",\n                hour: \"2-digit\",\n                minute: \"2-digit\"\n            })\n        }));\n\n        // ğŸ”¹ Ver si hay alguna pendiente\n        const hayPendientes = citasFormateadas.some(c => c.estado === 'Pendiente');\n\n        console.log(\"ğŸ‘‰ Estado seleccionado en render:\", estado);\n        console.log(\"ğŸ‘‰ Â¿Hay pendientes?\", hayPendientes);\n\n        res.render('citas', {\n            citas: citasFormateadas,\n            estadoSeleccionado: estado || '',\n            clasificacionSeleccionada: clasificacion || '',\n            clinicaSeleccionada: clinica || '',\n            hayPendientes // ğŸ‘ˆ ahora lo pasamos a la vista\n        });\n    });\n};\n\n\n// Mostrar formulario para una nueva cita\nexports.showNewForm = async (req, res) => {\n    const usuario = req.session.user;\n\n    if (!usuario) {\n        return res.status(401).send('Usuario no autenticado');\n    }\n\n    try {\n        // Consultas SQL para obtener especialidades y mÃ©dicos con sus especialidades\n        const [especialidades, medicos] = await Promise.all([\n            new Promise((resolve, reject) => {\n                db.query('SELECT * FROM especialidades', (err, results) => {\n                    if (err) {\n                        console.error('Error al obtener las especialidades:', err);\n                        return reject(err);\n                    }\n                    resolve(results);\n                });\n            }),\n            new Promise((resolve, reject) => {\n                const sqlMedicos = `\n                    SELECT \n                        medicos.idMedico, \n                        medicos.nombre, \n                        especialidades.nombre AS especialidad, \n                        medicos.telefono, \n                        medicos.email \n                    FROM medicos\n                    LEFT JOIN especialidades ON medicos.idEspecialidad = especialidades.idEspecialidad\n                `;\n                db.query(sqlMedicos, (err, results) => {\n                    if (err) {\n                        console.error('Error al obtener los mÃ©dicos:', err);\n                        return reject(err);\n                    }\n                    resolve(results);\n                });\n            })\n        ]);\n\n        console.log('Especialidades obtenidas:', especialidades);\n        console.log('MÃ©dicos obtenidos:', medicos);\n\n        // ConfiguraciÃ³n de datos para la vista\n        const renderData = {\n            especialidades,\n            medicos,\n            nombrePaciente: null,\n            idPaciente: null\n        };\n\n        if (usuario.role === 'paciente') {\n            renderData.nombrePaciente = usuario.nombre;\n            renderData.idPaciente = usuario.id;\n        }\n\n        res.render('newCita', renderData);\n\n    } catch (error) {\n        console.error('Error al cargar el formulario de nueva cita:', error);\n        res.status(500).send('Error al cargar el formulario de nueva cita');\n    }\n};\n\n// Mostrar los turnos del paciente autenticado\nexports.listarMisTurnos = (req, res) => {\n    const usuario = req.session.user;\n\n    if (!usuario || usuario.role !== 'paciente') {\n        return res.status(401).send('Acceso no autorizado');\n    }\n\n    const sql = `\n        SELECT \n            citas.idCita, \n            citas.fechaHora, \n            citas.motivoConsulta, \n            citas.estado, \n            medicos.nombre AS nombreMedico\n        FROM citas\n        JOIN medicos ON citas.idMedico = medicos.idMedico\n        WHERE citas.idPaciente = ?\n        ORDER BY citas.fechaHora DESC\n    `;\n\n    db.query(sql, [usuario.id], (error, results) => {\n        if (error) {\n            console.error('Error al obtener los turnos:', error);\n            return res.status(500).send('Error al obtener los turnos');\n        }\n\n        res.render('misTurnos', { turnos: results });\n    });\n};\n// Actualizar una cita\nexports.update = (req, res) => {\n    const id = req.params.id;\n    const { idMedico, idPaciente, fechaHora, motivoConsulta, estado, clasificacion } = req.body;\n\n    // Verificar si la cita existe y si estÃ¡ completada\n    const sqlVerificar = 'SELECT estado FROM citas WHERE idCita = ?';\n    db.query(sqlVerificar, [id], (error, results) => {\n        if (error) {\n            console.error('Error al verificar el estado de la cita:', error);\n            return res.status(500).send('Error al verificar el estado de la cita');\n        }\n\n        // âœ… Validar si no existe la cita\n        if (results.length === 0) {\n            return res.status(404).send('Cita no encontrada.');\n        }\n\n        // âœ… Validar si ya estÃ¡ completada\n        if (results[0].estado === 'Completado') {\n            return res.status(403).send('No se puede editar una cita completada.');\n        }\n\n        // Actualizar la cita incluyendo clasificaciÃ³n\n        const sql = `\n            UPDATE citas \n            SET idMedico = ?, idPaciente = ?, fechaHora = ?, motivoConsulta = ?, estado = ?, clasificacion = ?\n            WHERE idCita = ?\n        `;\n\n        db.query(sql, [idMedico, idPaciente, fechaHora, motivoConsulta, estado, clasificacion, id], (error) => {\n            if (error) {\n                console.error('Error al actualizar la cita:', error);\n                return res.status(500).send('Error al actualizar la cita');\n            }\n            res.redirect('/citas');\n        });\n    });\n};\n\n// Eliminar una cita\nexports.delete = (req, res) => {\n    const id = req.params.id;\n\n    // Verificar si la cita estÃ¡ completada\n    const sqlVerificar = 'SELECT estado FROM citas WHERE idCita = ?';\n    db.query(sqlVerificar, [id], (error, results) => {\n        if (error) {\n            console.error('Error al verificar el estado de la cita:', error);\n            return res.status(500).send('Error al verificar el estado de la cita');\n        }\n\n        if (results[0].estado === 'Completado') {\n            return res.status(403).send('No se puede eliminar una cita completada.');\n        }\n\n        // Eliminar la cita\n        const sql = 'DELETE FROM citas WHERE idCita = ?';\n        db.query(sql, [id], (error) => {\n            if (error) {\n                console.error('Error al eliminar la cita:', error);\n                return res.status(500).send('Error al eliminar la cita');\n            }\n            res.redirect('/citas');\n        });\n    });\n};\n\n// Crear una nueva cita\nexports.createCita = (req, res) => {\n    const { idPaciente, idMedico, fechaHora, motivoConsulta, tipoTurno } = req.body;\n\n    if (!idPaciente || !idMedico || !fechaHora || !motivoConsulta || !tipoTurno) {\n        return res.status(400).send('Faltan datos requeridos para la cita.');\n    }\n\n    const sanitizedIdPaciente = parseInt(idPaciente, 10);\n    const sanitizedIdMedico = parseInt(idMedico, 10);\n    const sanitizedMotivoConsulta = motivoConsulta.trim();\n    const sanitizedTipoTurno = tipoTurno.trim();\n\n    if (isNaN(sanitizedIdPaciente) || isNaN(sanitizedIdMedico)) {\n        return res.status(400).send('ID de paciente o mÃ©dico invÃ¡lido.');\n    }\n\n    // ğŸ“Œ Estado depende del rol\n    let estadoInicial = 'En proceso';  // default\n    if (req.session.user) {\n        if (req.session.user.role === 'paciente') {\n            estadoInicial = 'Pendiente';   // turno online\n        } else if (req.session.user.role === 'secretaria') {\n            estadoInicial = 'Confirmado';  // secretaria lo carga y queda confirmado\n        }\n    }\n\n    const sqlCita = `\n        INSERT INTO citas (idPaciente, idMedico, fechaHora, motivoConsulta, estado, tipoTurno) \n        VALUES (?, ?, ?, ?, ?, ?)\n    `;\n\n    db.query(\n        sqlCita,\n        [sanitizedIdPaciente, sanitizedIdMedico, fechaHora, sanitizedMotivoConsulta, estadoInicial, sanitizedTipoTurno],\n        (error) => {\n            if (error) {\n                console.error('Error al crear la cita:', error);\n                return res.status(500).send('Error al crear la cita.');\n            }\n\n            if (req.session.user.role === 'paciente') {\n                return res.redirect('/turnos/mis-turnos');\n            } else if (req.session.user.role === 'secretaria') {\n                return res.redirect('/secretaria/citas');\n            } else {\n                return res.redirect('/');\n            }\n        }\n    );\n};\n\n// Editar una cita\nexports.showEditForm = (req, res) => {\n    const id = req.params.id;\n\n    const sqlCita = 'SELECT * FROM citas WHERE idCita = ?';\n    db.query(sqlCita, [id], (errorCita, resultsCita) => {\n        if (errorCita) {\n            console.error('Error al obtener la cita:', errorCita);\n            return res.status(500).send(\"Error al obtener la cita\");\n        }\n        if (resultsCita.length === 0) {\n            return res.status(404).send(\"Cita no encontrada\");\n        }\n\n        // Formatear la fecha al formato compatible con datetime-local\n        resultsCita[0].fechaHora = new Date(resultsCita[0].fechaHora).toISOString().slice(0, 16);\n\n        const sqlMedicos = 'SELECT * FROM medicos';\n        const sqlPacientes = 'SELECT * FROM pacientes';\n\n        db.query(sqlMedicos, (errorMedicos, resultsMedicos) => {\n            if (errorMedicos) {\n                console.error('Error al obtener los mÃ©dicos:', errorMedicos);\n                return res.status(500).send(\"Error al obtener los mÃ©dicos\");\n            }\n\n            db.query(sqlPacientes, (errorPacientes, resultsPacientes) => {\n                if (errorPacientes) {\n                    console.error('Error al obtener los pacientes:', errorPacientes);\n                    return res.status(500).send(\"Error al obtener los pacientes\");\n                }\n\n                // Renderizar la vista con cita, mÃ©dicos y pacientes\n                res.render('editCita', {\n                    cita: resultsCita[0],\n                    medicos: resultsMedicos,\n                    pacientes: resultsPacientes\n                });\n            });\n        });\n    });\n};\n\n// Obtener citas en formato JSON \nexports.obtenerCitasJSON = (req, res) => {\n    const medicoId = req.params.id;\n    const { fechaInicio, fechaFin, estado } = req.query; // ParÃ¡metros opcionales\n\n    console.log('ID del mÃ©dico:', medicoId);\n\n    let sql = `\n        SELECT fechaHora, motivoConsulta, estado\n        FROM citas\n        WHERE idMedico = ?\n    `;\n    const params = [medicoId];\n\n    // Filtrar por rango de fechas\n    if (fechaInicio && fechaFin) {\n        sql += ' AND fechaHora BETWEEN ? AND ?';\n        params.push(fechaInicio, fechaFin);\n    }\n\n    // Filtrar por estado\n    if (estado) {\n        sql += ' AND estado = ?';\n        params.push(estado);\n    }\n\n    db.query(sql, params, (error, results) => {\n        if (error) {\n            console.error('Error al obtener las citas:', error);\n            return res.status(500).send('Error al obtener las citas');\n        }\n\n        const citasFormateadas = results.map(cita => ({\n            fecha: new Date(cita.fechaHora).toLocaleString(\"es-AR\", {\n                year: \"numeric\",\n                month: \"2-digit\",\n                day: \"2-digit\",\n                hour: \"2-digit\",\n                minute: \"2-digit\"\n            }),\n\n            motivo: cita.motivoConsulta || 'No especificado',\n            estado: cita.estado,\n        }));\n\n        console.log('Citas formateadas:', citasFormateadas);\n        res.json(citasFormateadas);\n    });\n};\nexports.actualizarEstadoCita = (req, res) => {\n    const { idCita, nuevoEstado } = req.body;\n\n    // ValidaciÃ³n de datos\n    if (!idCita || !nuevoEstado) {\n        return res.status(400).send('Faltan datos requeridos.');\n    }\n\n    const sql = 'UPDATE citas SET estado = ? WHERE idCita = ?';\n\n    db.query(sql, [nuevoEstado, idCita], (error, results) => {\n        if (error) {\n            console.error('Error al actualizar el estado de la cita:', error);\n            return res.status(500).send('Error al actualizar el estado.');\n        }\n\n        console.log(`Estado de la cita ${idCita} actualizado a ${nuevoEstado}`);\n        res.json({ mensaje: 'Estado actualizado correctamente' });\n    });\n};\nexports.iniciarConsulta = (req, res) => {\n    const idCita = req.params.idCita;\n\n    // Actualizar el estado de la cita a \"Atendido\"\n    const sql = 'UPDATE citas SET estado = ? WHERE idCita = ?';\n\n    db.query(sql, ['Atendido', idCita], (error) => {\n        if (error) {\n            console.error('Error al iniciar la consulta:', error);\n            return res.status(500).send('Error al iniciar la consulta');\n        }\n\n        // Redirigir a la historia clÃ­nica del paciente\n        res.redirect(`/historia-clinica/${idCita}`);\n    });\n};\nexports.cargarConsulta = (req, res) => {\n    const idCita = req.params.idCita;\n\n    // Consulta para obtener la informaciÃ³n de la cita y el paciente\n    const sql = `\n        SELECT citas.idCita, pacientes.nombre AS nombrePaciente, citas.fechaHora, citas.motivoConsulta\n        FROM citas\n        JOIN pacientes ON citas.idPaciente = pacientes.idPaciente\n        WHERE citas.idCita = ?\n    `;\n\n    db.query(sql, [idCita], (error, results) => {\n        if (error) {\n            console.error('Error al cargar la consulta:', error);\n            return res.status(500).send('Error al cargar la consulta');\n        }\n\n        if (results.length === 0) {\n            return res.status(404).send('Cita no encontrada');\n        }\n\n        // Renderizar la vista de consulta\n        res.render('consulta', {\n            cita: results[0]\n        });\n    });\n};\n// Marcar automÃ¡ticamente citas pasadas como \"Completado\"\nexports.marcarCitasCompletadas = () => {\n    const sql = `\n        UPDATE citas\n        SET estado = 'Completado'\n        WHERE fechaHora < NOW() AND estado != 'Completado'\n    `;\n\n    db.query(sql, (error) => {\n        if (error) {\n            console.error('Error al marcar citas como completadas:', error);\n        } else {\n            console.log('Citas pasadas marcadas como \"Completado\".');\n        }\n    });\n};\n// Eliminar un turno completado\nexports.deleteCompleted = (req, res) => {\n    const id = req.params.id;\n    const sql = 'DELETE FROM citas WHERE idCita = ? AND estado = \"Completado\"';\n\n    db.query(sql, [id], (error, results) => {\n        if (error) {\n            console.error('Error al eliminar el turno completado:', error);\n            res.status(500).send(\"Error al eliminar el turno completado\");\n        } else {\n            res.redirect('/turnos/mis-turnos');\n        }\n    });\n};\nexports.countEnProceso = (req, res) => {\n    const sql = \"SELECT COUNT(*) AS count FROM citas WHERE estado = 'En proceso'\";\n    db.query(sql, (error, results) => {\n        if (error) {\n            console.error('Error al contar citas en proceso:', error);\n            return res.status(500).send('Error al contar citas en proceso');\n        }\n        res.json({ count: results[0].count });\n    });\n};\n// funcion para la bsuqueda de paciente\nexports.autocompletePacientesParaCita = (req, res) => {\n    const term = req.query.term;\n    const sql = `SELECT idPaciente, nombre FROM pacientes WHERE nombre LIKE ? LIMIT 10`;\n    db.query(sql, [`%${term}%`], (error, results) => {\n        if (error) {\n            console.error('Error en la bÃºsqueda de pacientes:', error);\n            return res.status(500).send('Error en la bÃºsqueda');\n        }\n        res.json(results);\n    });\n};\n\nexports.confirmarPendientes = (req, res) => {\n    const { clinica, idCita } = req.body;\n\n    let sql;\n    const params = [];\n\n    if (idCita) {\n        sql = \"UPDATE citas SET estado = 'Confirmado' WHERE idCita = ? AND estado = 'Pendiente'\";\n        params.push(idCita);\n    } else {\n        sql = \"UPDATE citas SET estado = 'Confirmado' WHERE estado = 'Pendiente'\";\n        if (clinica) {\n            sql += \" AND idCita IN (SELECT c.idCita FROM citas c JOIN medicos_clinicas mc ON c.idMedico = mc.idMedico WHERE mc.idClinica = ?)\";\n            params.push(clinica);\n        }\n    }\n\n    db.query(sql, params, (error, result) => {\n        if (error) {\n            console.error(\"Error al confirmar citas pendientes:\", error);\n            return res.status(500).send(\"Error al confirmar pendientes\");\n        }\n\n        console.log(`ğŸ‘‰ ${result.affectedRows} citas confirmadas.`);\n\n        if (idCita) {\n            return res.json({ mensaje: 'Cita confirmada correctamente', idCita });\n        } else {\n            const redirectUrl = clinica \n                ? `/secretaria/citas?estado=Pendiente&clinica=${clinica}`\n                : `/secretaria/citas?estado=Pendiente`;\n            return res.redirect(redirectUrl);\n        }\n    });\n};\n\n\n\n\n\n"
    },
    "views": {
      "citas.pug": "extends layout\n\nblock content\n  h2 Listado de Citas\n\n  div.filtros\n    label(for=\"filtroMedico\") Filtrar por MÃ©dico:\n    input(type=\"text\" id=\"filtroMedico\" placeholder=\"Ingresa el nombre del mÃ©dico\")\n\n    if user.role === 'secretaria'\n      label(for=\"filtroEstado\") Filtrar por Estado:\n      select(id=\"filtroEstado\" name=\"estado\")\n        option(value=\"\") Todos\n        each estado in ['Pendiente', 'En proceso', 'Confirmado', 'Completado', 'Cancelado']\n          option(\n            value=estado \n            selected=(estadoSeleccionado && estadoSeleccionado.toLowerCase() === estado.toLowerCase())\n          )= estado\n\n      label(for=\"filtroClasificacion\") Filtrar por ClasificaciÃ³n:\n      select(id=\"filtroClasificacion\")\n        option(value=\"\") Todos\n        option(value=\"VIP\" selected=(clasificacionSeleccionada === 'VIP')) VIP\n        option(value=\"especial\" selected=(clasificacionSeleccionada === 'especial')) Especial\n        option(value=\"regular\" selected=(clasificacionSeleccionada === 'regular')) Regular\n      \n    label(for=\"filtroClinica\") Filtrar por ClÃ­nica:\n    select(id=\"filtroClinica\" name=\"clinica\")\n      option(value=\"\") Todas\n      option(value=\"1\" selected=(clinicaSeleccionada == 1)) ClÃ­nica 1\n      option(value=\"2\" selected=(clinicaSeleccionada == 2)) ClÃ­nica 2\n\n  if user.role === 'secretaria' && hayPendientes\n    form(action=\"/secretaria/citas/confirmar-pendientes\" method=\"POST\" style=\"margin: 15px 0;\")\n\n      if clinicaSeleccionada\n        input(type=\"hidden\" name=\"clinica\" value=clinicaSeleccionada)\n      button.btn.btn-success(type=\"submit\" onclick=\"return confirm('Â¿Confirmar todas las citas pendientes?')\") Confirmar todas las pendientes\n\n  table.table.table-striped#tablaCitas\n    thead\n      tr\n        th MÃ©dico\n        th Paciente\n        th Fecha y Hora\n        th Motivo de Consulta\n        th Estado\n        th ClasificaciÃ³n\n        th Acciones\n    tbody\n      if citas.length > 0\n        each cita in citas\n          tr(\n            data-estado=cita.estado \n            data-medico=cita.nombreMedico \n            data-clasificacion=cita.clasificacion\n          )\n            td= cita.nombreMedico\n            td= cita.nombrePaciente\n            td= cita.fechaHora\n            td= cita.motivoConsulta\n            td= cita.estado\n            td= cita.clasificacion\n            td.acciones\n              a.btn.btn-primary(href=`/citas/edit/${cita.idCita}`) Editar\n              a.btn.btn-danger(href=`/citas/delete/${cita.idCita}` onclick=\"return confirm('Â¿EstÃ¡s seguro de que deseas eliminar esta cita?')\") Eliminar\n              if cita.estado === 'Pendiente'\n                button.btn.btn-success.btn-confirmar(data-id=cita.idCita) Confirmar\n      else\n        tr\n          td(colspan=\"7\") No hay citas disponibles.\n\n  script(src=\"/js/filtrarCitas.js\")\n"
    }
  },
  "index.js": "require('dotenv').config();\n \nconst express = require('express');\nconst session = require('express-session');\nconst bcrypt = require('bcryptjs');\nconst config = require('./config/config');\nconst mysql = require('mysql2');\nconst logger = require('morgan');\nconst cookieParser = require('cookie-parser');\nconst compression = require('compression');\nconst methodOverride = require('method-override');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst router = express.Router();\nconst historiasController = require('./app/controllers/historiasController');\nconst medicosController = require('./app/controllers/medicosController');\nconst citasController = require('./app/controllers/citasController');\nconst authController = require('./app/controllers/authController');\nconst { isAuthenticated, isPacienteOrMedico } = require('./middleware/roleMiddleware');\nconst notificaciones = require('./utils/notificaciones');\n\n\n\n// Inicializar Express\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server);\nnotificaciones.init(io);\nconst port = 3000;\n\n// ConfiguraciÃ³n del motor de vistas\napp.set('view engine', 'pug');\napp.set('views', './app/views');\n\n// Middlewares para archivos estÃ¡ticos y manejo de datos\napp.use(express.static('public'));\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(cookieParser());\napp.use(compression());\napp.use(methodOverride('_method'));\n// ConfiguraciÃ³n de sesiones con MySQLStore\nconst MySQLStore = require('express-mysql-session')(session);\n\nconst sessionStore = new MySQLStore({\n    host: config.db.host,\n    port: config.db.port, \n    user: config.db.username,\n    password: config.db.password,\n    database: config.db.database\n});\n// ConfiguraciÃ³n de sesiones\napp.use(session({\n    key: 'turnoexpress.sid',\n    secret: 'tu_secreto_super_seguro',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n        secure: false, // true si usÃ¡s https\n        httpOnly: true,\n        maxAge: 1000 * 60 * 60 // 1 hora\n    }\n}));\n\n\n// Middleware para gestionar sesiones de usuarios\napp.use((req, res, next) => {\n    console.log('SesiÃ³n completa:', req.session);\n    console.log('Usuario en sesiÃ³n:', req.session.user);\n    console.log('ClÃ­nica seleccionada en sesiÃ³n:', req.session.idClinica);\n    res.locals.user = req.session.user; // Disponible en todas las vistas Pug\n    res.locals.clinicaSeleccionada = req.session.idClinica || false;\n    \n    next();\n});\n\n// Definir rutas principales\n\napp.get('/saludplus', (req, res) => {\n    req.session.clinicaSeleccionada = true;\n    res.render('layout', { title: 'ClÃ­nica Integral SaludPlus', clinicaSeleccionada: true });\n});\napp.get('/vidatotal', (req, res) => {\n    req.session.clinicaSeleccionada = true;\n    res.render('layout', { title: 'Centro MÃ©dico Vida Total', clinicaSeleccionada: true });\n});\n// Registrar las rutas de especialidades\nconst especialidadesRouter = require('./routes/especialidades');\napp.use('/especialidades', especialidadesRouter);\n// Registrar las rutas de secretaria\nconst secretariaRoutes = require('./routes/secretaria');\napp.use('/secretaria', secretariaRoutes);\n// Registrar las rutas de autenticaciÃ³n\nconst authRoutes = require('./routes/auth');\napp.use('/', authRoutes);\n// Registrar las rutas del administrador (nuevo archivo de rutas)\nconst adminRoutes = require('./routes/admin');\napp.use('/admin', adminRoutes);\n// Ruta para mostrar el formulario de selecciÃ³n de clÃ­nica\napp.get('/select-clinica', (req, res) => {\n    if (!req.session.user) {\n        return res.redirect('/login'); // Si no hay usuario, redirigir al login\n    }\n\n    if (req.session.user.role === 'secretaria') {\n        return res.redirect('/secretaria/pacientes'); // Las secretarias van directo a pacientes\n    }\n\n    res.render('selectClinica', { clinicaSeleccionada: req.session.idClinica || false });\n});\n\n// Ruta para manejar la selecciÃ³n de clÃ­nica\napp.post('/seleccionar-clinica', authController.seleccionarClinica);\n// Registrar las rutas de pacientes\nconst pacientesRouter = require('./routes/pacientes');\napp.use('/pacientes', pacientesRouter);\napp.use('/paciente', pacientesRouter);\napp.use('/registro-pendiente', pacientesRouter);\napp.get('/test-listado-medicos', (req, res) => {\n    res.render('listadoMedicos'); \n});\n\n// Registrar las rutas de mÃ©dicos\nconst medicosRoutes = require('./routes/medicos');\napp.use('/medicos', medicosRoutes);\n// Ruta para ver el historial de consultas de un paciente (puede ser accesible por mÃ©dicos o pacientes)\napp.get('/medicos/historial/:idPaciente', isAuthenticated, (req, res) => {\n    console.log(`Accediendo al historial del paciente con ID: ${req.params.idPaciente}`);\n    medicosController.verHistorialPaciente(req, res); // Llama al controlador para manejar la lÃ³gica\n});\n// Registrar las rutas de citas\nconst citasRoutes = require('./routes/citas');\napp.use('/citas', citasRoutes);\n\n// Registrar las rutas de historial clÃ­nico\nconst historiasRoutes = require('./routes/historias');\napp.get('/historias/:idPaciente?', isAuthenticated, isPacienteOrMedico, (req, res) => {\n    const role = req.session.user.role?.toLowerCase();\n\n    if (role === 'paciente') {\n        // Paciente: siempre ve SU propio historial\n        return historiasController.listAll(req, res);\n    } else if (role === 'medico') {\n        if (req.params.idPaciente) {\n            // MÃ©dico con ID especÃ­fico â†’ historial del paciente\n            return medicosController.verHistorialPaciente(req, res);\n        } else {\n            // MÃ©dico sin ID â†’ pedir selecciÃ³n de paciente\n            return res.status(400).send('Debe especificar un paciente: /historias/:idPaciente');\n        }\n    }\n});\n\n\n// Ruta para ver mis turnos\napp.get('/turnos/mis-turnos', isAuthenticated, citasController.listarMisTurnos);\n\n// Endpoint para agregar un nuevo registro mÃ©dico\napp.post('/addMedicalRecord', async (req, res) => {\n    try {\n        const newRecord = {\n            pacientesName: req.body.pacientesName,\n            condition: req.body.condition,\n            treatment: req.body.treatment,\n            dateOfVisit: req.body.dateOfVisit || new Date(),\n            notes: req.body.notes\n        };\n\n        const resultId = await MedicalRecord.create(newRecord);\n        res.status(201).send({ message: \"Registro mÃ©dico creado con Ã©xito\", id: resultId });\n    } catch (error) {\n        console.error('Error al procesar la solicitud:', error.message);\n        res.status(500).send(\"Error al insertar el registro mÃ©dico\");\n    }\n});\n \n// Ruta de inicio\n// Marcar citas pasadas como completadas al iniciar la aplicaciÃ³n\ncitasController.marcarCitasCompletadas();\napp.get('/', (req, res) => {\n    if (!req.session.user) {\n        // Si no hay usuario en la sesiÃ³n, renderiza el formulario para seleccionar la clÃ­nica\n        return res.render('layout', { title: 'TurnoExpress', clinicaSeleccionada: false });\n    }\n    \n    // Si hay un usuario autenticado, renderiza la pÃ¡gina principal con la clÃ­nica seleccionada\n    res.render('layout', { title: 'TurnoExpress', clinicaSeleccionada: true });\n});\n// Iniciar el servidor\nserver.listen(port, () => {\n    console.log(`Servidor corriendo en http://localhost:${port}`);\n    console.log('Rutas y middlewares configurados correctamente.');\n});\n",
  "public": {
    "js": {
      "filtrarCitas.js": "document.addEventListener('DOMContentLoaded', function () {\n  const inputFiltroMedico = document.getElementById('filtroMedico');\n  const selectFiltroEstado = document.getElementById('filtroEstado');\n  const selectFiltroClasificacion = document.getElementById('filtroClasificacion');\n  const tabla = document.getElementById('tablaCitas').getElementsByTagName('tbody')[0];\n\n  function filtrarCitas() {\n    const filtroMedico = inputFiltroMedico ? inputFiltroMedico.value.toLowerCase().trim() : '';\n    const filtroEstado = selectFiltroEstado ? selectFiltroEstado.value.toLowerCase().trim() : '';\n    const filtroClasificacion = selectFiltroClasificacion ? selectFiltroClasificacion.value.toLowerCase().trim() : '';\n    const filas = tabla.getElementsByTagName('tr');\n\n    for (let i = 0; i < filas.length; i++) {\n      const celdaMedico = filas[i].getElementsByTagName('td')[0];\n      const celdaEstado = filas[i].getElementsByTagName('td')[4];\n      const celdaClasificacion = filas[i].getElementsByTagName('td')[5];\n\n      if (celdaMedico && celdaEstado && celdaClasificacion) {\n        const nombreMedico = celdaMedico.textContent.toLowerCase().trim();\n        const estado = celdaEstado.textContent.toLowerCase().trim();\n        const clasificacion = celdaClasificacion.textContent.toLowerCase().trim();\n\n        console.log({\n          filtroMedico,\n          filtroEstado,\n          filtroClasificacion,\n          nombreMedico,\n          estado,\n          clasificacion\n        });\n\n        const mostrarFila =\n          (!filtroMedico || nombreMedico.includes(filtroMedico)) &&\n          (!filtroEstado || estado.includes(filtroEstado)) &&\n          (!filtroClasificacion || clasificacion.includes(filtroClasificacion));\n\n        filas[i].style.display = mostrarFila ? '' : 'none';\n      }\n    }\n  }\n\n  if (inputFiltroMedico) {\n    inputFiltroMedico.addEventListener('keyup', filtrarCitas);\n  }\n\n  if (selectFiltroEstado) {\n    selectFiltroEstado.addEventListener('change', filtrarCitas);\n  }\n\n  if (selectFiltroClasificacion) {\n    selectFiltroClasificacion.addEventListener('change', filtrarCitas);\n  }\n\n  // âœ… Nueva lÃ³gica: botones individuales \"Confirmar\"\n  const botonesConfirmar = document.querySelectorAll('.btn-confirmar');\n  botonesConfirmar.forEach(boton => {\n    boton.addEventListener('click', function () {\n      const idCita = this.getAttribute('data-id');\n      if (confirm('Â¿Confirmar esta cita pendiente?')) {\n        fetch('/secretaria/citas/confirmar-pendientes', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ idCita })\n        })\n          .then(response => {\n            if (!response.ok) {\n              throw new Error('Error al confirmar la cita');\n            }\n            return response.json();\n          })\n          .then(data => {\n            console.log('Respuesta:', data);\n            window.location.reload();\n          })\n          .catch(error => {\n            console.error('Error en la confirmaciÃ³n:', error);\n            alert('Hubo un problema al confirmar la cita.');\n          });\n      }\n    });\n  });\n});\n"
    }
  },
  "routes": {
    "citas.js": "const express = require('express');\nconst router = express.Router();\nconst citasController = require('../app/controllers/citasController');\nconst { isAuthenticated, isSecretaria, isPacienteOrSecretaria } = require('../middleware/roleMiddleware');\n\n// Listar todas las citas\nrouter.get('/', isAuthenticated, isSecretaria, citasController.filterByState);\n\n\n// Mostrar el formulario para crear una nueva cita\nrouter.get('/new', isAuthenticated, isPacienteOrSecretaria, citasController.showNewForm);\n\n// Crear una nueva cita\nrouter.post('/new', isAuthenticated, isPacienteOrSecretaria, citasController.createCita);\n\n// Mostrar el formulario para editar una cita\nrouter.get('/edit/:id', isAuthenticated, citasController.showEditForm);\n\n// Actualizar una cita\nrouter.post('/update/:id', isAuthenticated, citasController.update);\n\n// Eliminar una cita\nrouter.get('/delete/:id', isAuthenticated, citasController.delete);\n\n// Ruta para filtrar citas por estado (solo para secretaria)\nrouter.get('/filter', isAuthenticated, isSecretaria, citasController.filterByState);\n// Eliminar un turno completado\nrouter.get('/delete-completed/:id', isAuthenticated, isPacienteOrSecretaria, citasController.deleteCompleted);\n\n// Eliminar una cita normal\nrouter.get('/delete/:id', isAuthenticated, isPacienteOrSecretaria, citasController.delete);\n// Ruta para contar citas en proceso\nrouter.get('/count-en-proceso', isAuthenticated, isSecretaria, citasController.countEnProceso);\n// Ruta para el autocompletado de pacientes en el formulario de creaciÃ³n de citas\nrouter.get('/buscar-paciente', isAuthenticated, isPacienteOrSecretaria, citasController.autocompletePacientesParaCita);\n\nmodule.exports = router;\n",
    "secretaria.js": "const express = require('express');\nconst router = express.Router();\nconst authMiddleware = require('../middleware/roleMiddleware');\nconst { isAuthenticated, isSecretaria } = require('../middleware/roleMiddleware');\n\n// Importamos los controladores necesarios\nconst pacientesController = require('../app/controllers/pacientesController');\nconst medicosController = require('../app/controllers/medicosController');\nconst citasController = require('../app/controllers/citasController');\n\n// Middleware para verificar autenticaciÃ³n y rol de secretaria\nrouter.use(authMiddleware.isAuthenticated, authMiddleware.isSecretaria);\n\n// **Rutas de gestiÃ³n de pacientes** âœ… secretaria puede ver, crear, editar y eliminar\nrouter.get('/pacientes', pacientesController.listAll);\nrouter.get('/pacientes/new', pacientesController.showRegisterForm); // Corregido a showRegisterForm\nrouter.post('/pacientes', pacientesController.create);\nrouter.get('/pacientes/:id/edit', pacientesController.showEditForm);\nrouter.post('/pacientes/:id', pacientesController.update);\nrouter.delete('/pacientes/:id/delete', pacientesController.delete);\n\n// Ruta de bÃºsqueda de pacientes\nrouter.get('/pacientes/search', (req, res) => {\n    console.log('Query recibida:', req.query);\n    pacientesController.search(req, res);\n});\n\n\nrouter.get('/ver-medicos', medicosController.listAllReadOnly);\n\n\n\n// Dashboard de la secretaria\nrouter.get('/dashboard', (req, res) => {\n    res.render('escritorioSecretaria', { user: req.session.user });\n});\n\n// **Rutas para gestionar citas** âœ… secretaria puede ver, crear, editar y eliminar\nrouter.get('/citas', authMiddleware.isAuthenticated, authMiddleware.isSecretaria, citasController.filterByState);\n\nrouter.get('/citas/new', citasController.showNewForm);\nrouter.post('/citas', citasController.createCita);\nrouter.get('/citas/:id/edit', citasController.showEditForm);\nrouter.post('/citas/:id', citasController.update);\nrouter.delete('/citas/:id/delete', citasController.delete);\nrouter.post('/citas/confirmar-pendientes', citasController.confirmarPendientes);\n\nmodule.exports = router;\n"
  }
}