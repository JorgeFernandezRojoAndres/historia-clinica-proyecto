function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { getCircle, getRectangle } from 'shared/utils/svgPrimitives';
import { assignState } from 'shared/utils/composition';
import { extractBasicState, setupBasicBehaviour, setupInitialSelectors, calculateBoundaries, delegateInit } from './BaseShape';
var ENTITY_FIELD_NAME = 'RootCircle';
var calculateFromPoint = function calculateFromPoint(_ref) {
  var position = _ref.position,
    theme = _ref.theme;
  var r = theme.radius;
  return {
    x: position.x,
    y: position.y + r
  };
};
var setupInitialProperties = function setupInitialProperties(state) {
  return {
    fromPoint: calculateFromPoint(state),
    boundaries: calculateBoundaries(state)
  };
};
var setupCircleBehavior = function setupCircleBehavior(state) {
  return {
    print: function print() {
      var theme = state.theme;
      var _state$position = state.position,
        x = _state$position.x,
        y = _state$position.y,
        _state$dimensions = state.dimensions,
        w = _state$dimensions.w,
        h = _state$dimensions.h,
        r = theme.radius;
      var namePosition = {
        x: x + r,
        y: y - r
      };
      return "\n            <g>\n               ".concat(getRectangle(x, y - r + r / 4, w + r, h - theme.padding * 2, theme), "\n               ").concat(getCircle(x, y, r, theme), "\n               ").concat(this.printName(namePosition), "\n            </g>");
    },
    setChildOffsetPoint: function setChildOffsetPoint(point) {
      state.childOffsetPoint = point;
    }
  };
};
export var RootCircle = function RootCircle(initialState) {
  var state = extractBasicState(initialState);
  state = _objectSpread(_objectSpread({}, state), setupInitialProperties(state));
  return assignState(state, [setupInitialSelectors, setupBasicBehaviour, setupCircleBehavior]);
};
export default delegateInit(RootCircle, ENTITY_FIELD_NAME);