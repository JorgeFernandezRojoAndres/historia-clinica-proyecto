function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { getRoundedRectangle, getLine, getClosedPath } from 'shared/utils/svgPrimitives';
import { assignState } from 'shared/utils/composition';
import { addOffsetToPoints } from 'shared/utils/geometry';
import { setupBasicBehaviour, setupInitialProperties, setupInitialSelectors, calculateHeight, calculateNameBasedWidth, calculatePosition, delegateInit } from './BaseShape';
var ENTITY_FIELD_NAME = 'DestructedNode';
var setupDestructedNodeBehaviour = function setupDestructedNodeBehaviour(state) {
  return {
    print: function print(config) {
      var theme = state.theme,
        suffixTheme = theme.suffix;
      var _state$position = state.position,
        x = _state$position.x,
        y = _state$position.y,
        h = state.dimensions.h,
        w = state.dimensions.w - 2 * (suffixTheme.width + suffixTheme.space),
        namePosition = {
          x: x,
          y: y
        };
      var suffix1 = getRoundedRectangle(x + w + suffixTheme.space, y, suffixTheme.width, h, suffixTheme);
      var suffix2 = getRoundedRectangle(x + w + 2 * suffixTheme.space + suffixTheme.width, y, suffixTheme.width, h, suffixTheme);
      return "\n            <g>\n                ".concat(getRoundedRectangle(x, y, w, h, theme), "\n                \n                ").concat(suffix1, "\n                ").concat(suffix2, "\n                             \n                ").concat(this.printName(namePosition), "\n                ").concat(this.printDebugInfo(config), "\n            </g>");
    }
  };
};
var calculateWidth = function calculateWidth(state) {
  var theme = state.theme,
    suffix = theme.suffix;
  return 2 * theme.horizontalPadding + 2 * (suffix.width + +suffix.space) + calculateNameBasedWidth(state);
};
var calculateDimensions = function calculateDimensions(state) {
  return {
    w: calculateWidth(state),
    h: calculateHeight(state)
  };
};
var extractBasicState = function extractBasicState(state) {
  return _objectSpread(_objectSpread({}, state), {}, {
    position: calculatePosition(state),
    dimensions: calculateDimensions(state)
  });
};
export var DestructedNode = function DestructedNode(initialState) {
  var state = extractBasicState(initialState);
  state = _objectSpread(_objectSpread({}, state), setupInitialProperties(state));
  return assignState(state, [setupInitialSelectors, setupBasicBehaviour, setupDestructedNodeBehaviour]);
};
export default delegateInit(DestructedNode, ENTITY_FIELD_NAME);