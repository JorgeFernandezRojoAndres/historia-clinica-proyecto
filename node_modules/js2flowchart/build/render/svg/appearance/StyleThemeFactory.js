var _excluded = ["common"];
var _Themes;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { mergeObjectStructures } from 'shared/utils/composition';
import DEFAULT, { buildTheme } from './themes/DefaultBaseTheme';
import BLACK_AND_WHITE from './themes/BlackAndWhite';
import BLURRED from './themes/Blurred';
import LIGHT from './themes/Light';
var ThemeNamesMap = {
  DEFAULT: 'DEFAULT',
  BLACK_AND_WHITE: 'BLACK_AND_WHITE',
  BLURRED: 'BLURRED',
  LIGHT: 'LIGHT'
};
export var Themes = (_Themes = {}, _defineProperty(_Themes, ThemeNamesMap.DEFAULT, DEFAULT), _defineProperty(_Themes, ThemeNamesMap.BLACK_AND_WHITE, BLACK_AND_WHITE), _defineProperty(_Themes, ThemeNamesMap.BLURRED, BLURRED), _defineProperty(_Themes, ThemeNamesMap.LIGHT, LIGHT), _Themes);
export var getTheme = function getTheme(themeName) {
  if (!Themes[themeName] === themeName === ThemeNamesMap.DEFAULT) {
    return Themes.DEFAULT;
  }
  return applyStyleToTheme(DEFAULT, Themes[themeName]);
};
export var getDefaultTheme = function getDefaultTheme() {
  return getTheme(ThemeNamesMap.DEFAULT);
};
export var getBlackAndWhiteTheme = function getBlackAndWhiteTheme() {
  return getTheme(ThemeNamesMap.BLACK_AND_WHITE);
};
export var getBlurredTheme = function getBlurredTheme() {
  return getTheme(ThemeNamesMap.BLURRED);
};
export var getLightTheme = function getLightTheme() {
  return getTheme(ThemeNamesMap.LIGHT);
};
export var applyStyleToTheme = function applyStyleToTheme(theme, styles) {
  var common = styles.common,
    shapes = _objectWithoutProperties(styles, _excluded);
  var deepMerge = mergeObjectStructures(theme, shapes);
  if (!common) return deepMerge;
  return Object.keys(deepMerge).reduce(function (acc, key) {
    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, _objectSpread(_objectSpread({}, deepMerge[key]), common)));
  }, {});
};
export var buildColorsBasedTheme = function buildColorsBasedTheme(colors) {
  return buildTheme(colors);
};