function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import * as babelParser from '@babel/parser';
import { mergeObjectStructures } from 'shared/utils/composition';
import { TOKEN_KEYS } from 'shared/constants';
import { setupPointer } from 'shared/utils/treeLevelsPointer';
import { logError } from 'shared/utils/logger';
import defaultAstConfig from './astParserConfig';
export var parseCodeToAST = function parseCodeToAST(code) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var ast = [];
  try {
    ast = babelParser.parse(code, mergeObjectStructures(defaultAstConfig, config));
  } catch (e) {
    logError('Error at parseCodeToAST: ' + e.message, e.loc, e.stack);
    throw e;
  }
  return ast;
};
export var buildVisitor = function buildVisitor(_ref, treeNodesDestination) {
  var definitionsMap = _ref.definitionsMap,
    globalIgnore = _ref.globalIgnore;
  var pointer = setupPointer(treeNodesDestination),
    wrapByGlobalIgnore = function wrapByGlobalIgnore(visit) {
      return function (path) {
        return visit(path, globalIgnore);
      };
    };
  return definitionsMap.reduce(function (acc, item) {
    if (!item.body) {
      acc[item.type] = item.reversed ? {
        exit: wrapByGlobalIgnore(visitSimpleEntry(item, pointer))
      } : wrapByGlobalIgnore(visitSimpleEntry(item, pointer));
    } else {
      acc[item.type] = {
        enter: wrapByGlobalIgnore(enterComplexEntry(item, pointer)),
        exit: wrapByGlobalIgnore(exitComplexEntry(item, pointer))
      };
    }
    return acc;
  }, {});
};

//TODO: refactor, looks a bit duplicated
var visitSimpleEntry = function visitSimpleEntry(item, pointer) {
  return function (path, globalIgnore) {
    if (item.ignore && item.ignore(path)) return;
    var entryConfig = _objectSpread({}, getBasicEntryConfig(item, path));
    if (globalIgnore && globalIgnore(entryConfig)) return;
    pushEntry(pointer, entryConfig);
  };
};
var enterComplexEntry = function enterComplexEntry(item, pointer) {
  return function (path, globalIgnore) {
    if (item.ignore && item.ignore(path)) return;
    var entryConfig = pushComplexEntry(item, pointer, path, globalIgnore);
    pointer.stepIn(entryConfig);
  };
};
var pushComplexEntry = function pushComplexEntry(item, pointer, path, globalIgnore) {
  var entryConfig = _objectSpread(_objectSpread({}, getBasicEntryConfig(item, path)), {}, {
    body: []
  });
  if (!(globalIgnore && globalIgnore(entryConfig))) {
    pushEntry(pointer, entryConfig);
  }
  return entryConfig;
};
var pushEntry = function pushEntry(pointer, entry) {
  var parent = pointer.getCurrent();
  entry.parent = parent;
  (parent.body || parent).push(entry);
};
var getStatementParentKey = function getStatementParentKey(path) {
  var statementParent = path.find(function (path) {
    return path.parentKey === TOKEN_KEYS.PROGRAM || path.isStatementOrBlock();
  }) || {};
  return statementParent.key;
};
var exitComplexEntry = function exitComplexEntry(item, pointer) {
  return function (path) {
    if (item.ignore && item.ignore(path)) return;
    pointer.stepOut();
  };
};
var getBasicEntryConfig = function getBasicEntryConfig(item, path) {
  var name = item.getName(path),
    nameOptions = typeof name === 'string' ? {
      name: name
    } : name;
  var config = _objectSpread(_objectSpread({}, nameOptions), {}, {
    type: item.type,
    key: getStatementParentKey(path),
    isBodyEntry: path.key === TOKEN_KEYS.BODY
  });
  if (!config.name) {
    config.name = '';
  }
  if (item.type !== path.node.type) {
    config.subType = path.node.type;
  }
  return config;
};