function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import traverse from '@babel/traverse';
import { DefinitionsList } from './entryDefinitionsMap';
import { parseCodeToAST, buildVisitor } from './astBuilder';
import { ABSTRACTION_LEVELS, rebuildConfigForAbstractionLevel } from './abstractionLevelsConfigurator';
import FlowTreeModifier from './FlowTreeModifier';
import { DEFINED_MODIFIERS, MODIFIER_PRESETS, destructionModifier, expressionCallbacksModifier, arrowFunctionReturnModifier } from './modifiers/modifiersFactory';
import { TOKEN_TYPES } from 'shared/constants';
import { logError } from 'shared/utils/logger';
var buildFlowTree = function buildFlowTree(astTree, astVisitorConfig) {
  var treeNodes = [];
  traverse(astTree, buildVisitor(astVisitorConfig, treeNodes));
  var root = treeNodes.length && treeNodes[0] || {};
  return root.type === TOKEN_TYPES.PROGRAM ? root : {
    name: 'Root',
    type: TOKEN_TYPES.PROGRAM,
    body: treeNodes
  };
};

//TODO: seems redundant abstraction, refactor
export var createFlowTreeModifier = function createFlowTreeModifier() {
  var modifiers = FlowTreeModifier();
  return {
    setModifier: function setModifier(modifier) {
      modifiers.addModifier(modifier);
    },
    registerNewModifier: function registerNewModifier(test, updates) {
      modifiers.create(test, updates);
    },
    destructNodeTree: function destructNodeTree(test, newNameFn) {
      this.setModifier(destructionModifier(test, newNameFn));
    },
    applyToFlowTree: function applyToFlowTree(flowTree) {
      modifiers.applyTo(flowTree);
      return flowTree;
    }
  };
};
export default (function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref$astParser = _ref.astParser,
    astParser = _ref$astParser === void 0 ? {} : _ref$astParser,
    _ref$astVisitor = _ref.astVisitor,
    astVisitor = _ref$astVisitor === void 0 ? {} : _ref$astVisitor;
  var astParserConfig = _objectSpread({}, astParser);
  var astVisitorConfig = _objectSpread({
    definitionsMap: _toConsumableArray(DefinitionsList),
    globalIgnore: null
  }, astVisitor);
  var defaultModifier = createFlowTreeModifier();
  defaultModifier.setModifier(expressionCallbacksModifier());
  defaultModifier.setModifier(arrowFunctionReturnModifier());
  return {
    setAbstractionLevel: function setAbstractionLevel(level) {
      astVisitorConfig.definitionsMap = rebuildConfigForAbstractionLevel(level);
    },
    resetAbstractionLevelToNormal: function resetAbstractionLevelToNormal() {
      astVisitorConfig.definitionsMap = _toConsumableArray(DefinitionsList);
    },
    setIgnoreFilter: function setIgnoreFilter(fn) {
      astVisitorConfig.globalIgnore = fn;
    },
    build: function build(code) {
      var ast = this.buildAst(code);
      return this.buildFlowTreeFromAst(ast);
    },
    buildAst: function buildAst(code) {
      return parseCodeToAST(code, astParserConfig);
    },
    buildFlowTreeFromAst: function buildFlowTreeFromAst(ast) {
      var flowTree = [];
      try {
        flowTree = buildFlowTree(ast, astVisitorConfig);
        defaultModifier.applyToFlowTree(flowTree);
      } catch (e) {
        logError('Error at buildFlowTreeFromAst' + e.message, e.stack);
        throw e;
      }
      return flowTree;
    }
  };
});
export { DEFINED_MODIFIERS, MODIFIER_PRESETS, ABSTRACTION_LEVELS };