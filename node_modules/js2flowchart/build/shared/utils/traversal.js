function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
export var levelsTraversal = function levelsTraversal(tree, stepIn, onNode, stepOut) {
  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  var getBody = options.getBody || function (node) {
    return node.body;
  };
  stepIn(tree);
  getBody(tree).forEach(function (node) {
    onNode(node);
    if (getBody(node)) {
      levelsTraversal(node, stepIn, onNode, stepOut, options);
    }
  });
  stepOut(tree);
};
export var traversal = function traversal(tree, fn) {
  var getBody = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (node) {
    return node.body;
  };
  var queue = [].concat(tree);
  while (queue.length) {
    var node = queue.shift();
    fn(node);
    var nodeBody = getBody(node);
    if (nodeBody) {
      queue = [].concat(_toConsumableArray(queue), _toConsumableArray(nodeBody));
    }
  }
};
export var traversalSearch = function traversalSearch(tree, fn) {
  var result = [];
  traversal(tree, function (node) {
    if (fn(node)) {
      result.push(node);
    }
  });
  return result;
};